求第k大：
#include<iostream>
#include<algorithm>
using namespace std;

int a[1000], n, k;
int part(int ileft, int iright);
int search(int n, int k);
int main()
{
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		cin >> a[i];
	}
	cin >> k;
	cout << search(n, k);
	return 0;
}

int part(int ileft, int iright) {
	if (ileft == iright)
		return ileft;
	int i = ileft + 1, j = iright,pivot = a[ileft];
	while (i <= j){
		while (i <= j && a[i] < pivot)
		i++;
	while (i <= j && a[i] > pivot)
		j--;
	if (i < j) {
		swap(a[i], a[j]);
		i++;
		j--;
	}
		}
	swap(a[ileft], a[j]);
	return j;
}

int search(int n, int k) {
	random_shuffle(a + 1, a + n + 1);
	int t = n - k + 1;
	int ileft = 1, iright = n;
	int mid;
	while (ileft <= iright) {
		mid = part(ileft, iright);
		if (mid == t) break;
		else if (t < mid) iright = mid - 1;
		else ileft = mid + 1;

	}
	return a[mid];
}


求两个链表的交集
#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#define MAX 100

typedef struct LNode {
	int data;
	struct LNode* next;
}LNode, * LinkList;

int InitList(LinkList& L) {
	L = new LNode;
	L->next = NULL;
	return 1;
}

void TraveList(LinkList L) {
	struct LNode* p;
	p = L->next;
	while (p) {
		printf("%d ", p->data);
		p = p->next;
	}
	printf("\n");
}

int ListLength(LinkList& L) {
	int length = 0;
	struct LNode* p;
	p = L->next;
	while (p) {
		++length;
		p = p->next;
	}
	return length;
}

void CreateList(LinkList& L, int n) {
	L = new LNode;
	L->next = NULL;
	struct LNode* r;
	r = L;
	for (int i = 0; i < n; i++) {
		printf("请输入第%d个元素的值:", i + 1);
		struct LNode* s;
		s = new LNode;
		scanf("%d", &s->data);
		s->next = NULL;
		r->next = s;
		r = s;
	}
}

/*
算法思想：
假设两个表分别是L1和L2，表的元素递增排列；需要3个指针，pa，pb，pc.
指针的初始值是pa指向L1的第一个结点，pb指向L2的第一个结点，pc指向新表L3的头结点；
初始时，L3指向L1的头结点。
当pa和pb的指向都非空时，比较pa和pb所指向的元素的值，当pa->data<pb->data时，指针pa后移，pb不变；
当pa->data>pb->data时，pb指针后移，pa不变；
当pa->data==pb->data时，让指针pc指向pa,之后pa和pb都后移.
*/
void Intersection(LinkList& L1, LinkList& L2, LinkList& L3) {
	struct LNode* pa, * pb, * pc;
	pa = L1->next;
	pb = L2->next;
	L3 = L1;
	pc = L3;
	//L3->next=NULL;
	while (pa && pb) {
		struct LNode* q;
		if (pa->data < pb->data) {
			pa = pa->next;
		}
		else if (pa->data > pb->data) {
			pb = pb->next;
		}
		else if (pa->data == pb->data) {
			pc->next = pa;
			pc = pa;
			pa = pa->next;
			pb = pb->next;
		}
	}
}
int main() {
	LinkList L1, L2, L3;

	if (InitList(L1)) {
		printf("表L1初始化成功!\n");
	}
	else {
		printf("表L1初始化失败!\n");
	}

	if (InitList(L2)) {
		printf("表L2初始化成功!\n");
	}
	else {
		printf("表L2初始化失败!\n");
	}

	if (InitList(L3)) {
		printf("表L3初始化成功!\n");
	}
	else {
		printf("表L3初始化失败!\n");
	}

	printf("请输入L1的长度:");
	int n1;
	scanf("%d", &n1);
	CreateList(L1, n1);
	printf("L1的长度:%d\n", ListLength(L1));
	TraveList(L1);

	printf("请输入L2的长度:");
	int n2;
	scanf("%d", &n2);
	CreateList(L2, n2);
	TraveList(L2);

	Intersection(L1, L2, L3);
	printf("输出交集:\n");
	TraveList(L1);
}

两个多项式相加
#include<iostream>
using namespace std;

typedef struct Polynimial
{
	double coef;				//系数
	int exp;					//指数
	struct Polynimial* next;
}Polynimial, * PolynimialList;

/*创建一元多项式*/
void CreatePolynimial(PolynimialList& L)
{
	double coef;
	int exp;
	L = new Polynimial;		//创建头节点，其next域置为NULL
	L->next = NULL;
	Polynimial* p;
	Polynimial* r = L;		//r始终指向尾结点，初始时指向头结点
	cout << "请依次输入多项式的系数与指数（输入指数为0表示结束）：" << endl;
	cin >> coef >> exp;
	while (coef != 0)			//循环建立数据结点p
	{
		p = (Polynimial*)new Polynimial;
		p->coef = coef;
		p->exp = exp;
		r->next = p;		//利用尾插法，插入结点
		r = p;
		cin >> coef >> exp;
	}
	r->next = NULL;			//尾结点的next域置为NULL
}

/*删除一元多项式的某一项*/
void DestroyPolynomial(PolynimialList& L)
{
	Polynimial* pre = L, * p = L->next;
	while (p != NULL)
	{
		delete pre;
		pre = p;
		p = p->next;
	}
	delete pre;
}

/*合并多项式*/
void CombinePolynomial(PolynimialList& P, PolynimialList& Q)
{
	Polynimial* p, * q, * pre, * temp;
	p = P->next;
	q = Q->next;
	pre = P;
	temp = NULL;
	while (p != NULL && q != NULL)	//扫描p与q，当任意一个扫描完时，跳出循环
	{
		if (p->exp < q->exp)
		{
			pre = p;		  //pre与p后移
			p = p->next;
		}
		else if (p->exp > q->exp)
		{
			temp = q->next;	  //保存q的后继结点的地址	
			q->next = p;      //将q结点插入p结点之前，pre之后
			pre->next = q;
			pre = pre->next;  //pre后移
			q = temp;         //q后移
		}
		else
		{
			p->coef = p->coef + q->coef;
			if (p->coef == 0)
			{
				temp = p;		//删除结点p，p后移
				p = p->next;
				pre->next = p;
				free(temp);
			}
			else
			{
				pre = p;		//pre与p后移
				p = p->next;
			}
			temp = q;			//删除结点q，q后移
			q = q->next;
			free(temp);
		}
	}
	if (q != NULL)				//如果p扫描完(p=null,pre指向最后一个结点)，q未扫描完,
	{
		pre->next = q;
	}
}

/*输出一元多项式*/
void PrintPolynimial(PolynimialList& L)
{
	Polynimial* p = L->next;
	if (p == NULL)
	{
		cout << "该多项式为空项！" << endl;
	}
	cout << "多项式为 ：";
	while (p != NULL)
	{

		if (p->exp != 0)	cout << p->coef << "*x^" << p->exp;
		else                cout << p->coef;
		if (p->next != NULL && p->next->coef > 0)
		{
			cout << " + ";
		}
		p = p->next;
	}
}

int main()
{
	PolynimialList P = NULL, Q = NULL;		//创建多项式P(x)与Q(x)
	cout << "1.构造多项式P(x)" << endl;
	CreatePolynimial(P);
	PrintPolynimial(P);
	cout << "\n\n2.构造多项式Q(x)" << endl;
	CreatePolynimial(Q);
	PrintPolynimial(Q);
	cout << "\n\n3.多项式求和" << endl;
	CombinePolynomial(P, Q);				//合并多项式
	PrintPolynimial(P);						//输出合并后的多项式
	DestroyPolynomial(P);					//销毁链表
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
实验四：
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAXSIZE 100
#define ERROR 0
#define OK 1
typedef int SElemType;
typedef int Status;

typedef struct Queue {
	SElemType data[MAXSIZE];
	int front;
	int rear;
} Queue;

//初始化队列 
void InitQueue(Queue* q) {
	q->data[0] = 0;
	q->front = 0;
	q->rear = 0;
}

//入队
Status EnQueue(Queue* q, SElemType num) {
	if (q->rear >= MAXSIZE - 1) {
		return ERROR;
	}
	q->data[q->rear] = num;
	q->rear++;
	return OK;
}

//出队
Status DeQueue(Queue* q, SElemType* num) {
	if (q->front >= q->rear) {
		return ERROR;
	}
	*num = q->data[q->front];
	q->front++;
	return OK;
}

//获取头元素 
Status GetHead(Queue* q, SElemType* num) {
	if (q->front >= q->rear) {
		return ERROR;
	}
	*num = q->data[q->front];
	return OK;
}

//获取尾元素 
Status GetRear(Queue* q, SElemType* num) {
	if (q->front >= q->rear) {
		return ERROR;
	}
	*num = q->data[q->rear - 1];
	return OK;
}

int main() {
	Queue H1;
	InitQueue(&H1);
	Queue H2;
	InitQueue(&H2);
	Queue H3;
	InitQueue(&H3);
	Queue* QArray[] = { &H1, &H2, &H3 };//指向结构体的指针数组,将H1,H2,H3放入数组 
	printf("请输入火车车厢,输入0停止输入\n");
	while (true) {//元素全部入队进H3 
		int num;
		scanf("%d", &num);
		if (num == 0) {
			break;
		}
		EnQueue(&H3, num);
	}
	//	int num;
	//	GetRear(&H3, &num);
	//	printf("%d\n", num);

	int nowOut = 1;//火车车厢排序的关键 
	printf("\n出队序列为:");
	//遍历H3队列 
	while (H3.front < H3.rear || H1.front < H1.rear || H2.front < H2.rear) {
		int flag = 0;
		int num;
		GetHead(&H3, &num);
		//如果当前遍历元素等于nowOut就H3对头元素出队 
		if (num == nowOut) {
			DeQueue(&H3, &num);
			printf("%d", num);
			nowOut++;
			flag = 1;
		}
		else {
			//否则去寻找H1和H2对头元素是否等于nowOut,等于就出队 
			for (int i = 0; i < 2; i++) {
				GetHead(QArray[i], &num);
				if (num == nowOut) {
					DeQueue(QArray[i], &num);
					printf("%d", num);
					nowOut++;
					flag = 1;
				}
			}
		}
		/*
		如果H1,H2,H3的对头都没有等于nowOut的元素,
		那么就将该元素入队至H1或H2,条件是小于队尾元素
		*/
		if (flag == 0) {
			int container;
			for (int i = 0; i < 2; i++) {
				GetHead(&H3, &num);
				GetRear(QArray[i], &container);
				if (num > container || QArray[i]->rear == 0) {
					DeQueue(&H3, &num);
					EnQueue(QArray[i], num);
					break;
				}
			}
		}

	}
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
稀疏矩阵
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#define OK 1
#define Maxsize 10 //用户自定义三元组最大长度
typedef struct { //定义三元组表
	int i, j;
	int v;
}SPNode;
typedef struct
{ //定义三元组表
	SPNode data[Maxsize];
	int m, n, t;//矩阵行、列及三元表长度
}SPMatrix;
void InitSPNode(SPMatrix* a) { //输入三元组表
	int i, j, k, val, maxrow, maxcol;
	maxrow = 0;
	maxcol = 0;
	i = j = 0;
	k = 0;
	while (i != -1 && j != -1)//row=-1&&col=-1 结束输入
	{
		printf(" 输入(行 列 值):  ");
		scanf(" %d %d %d", &i, &j, &val);
		a->data[k].i = i;
		a->data[k].j = j;
		a->data[k].v = val;
		if (maxrow < i) maxrow = i;
		if (maxcol < j) maxcol = j;
		k++;
	}
	a->m = maxrow;
	a->n = maxcol;
	a->t = k - 1;
}
void showMatrix(SPMatrix* a) { //输出稀疏矩阵
	int p, q;
	int t = 0;
	for (p = 0; p <= a->m; p++) {
		for (q = 0; q <= a->n; q++) {
			if (a->data[t].i == p && a->data[t].j == q) {
				printf(" %d  ", a->data[t].v);
				t++;
			}
			else printf(" 0  ");
		}
		printf("\n");
	}
}
void TransposeSMatrix(SPMatrix* a, SPMatrix* b) { //稀疏矩阵转置
	int q, col, p;
	b->m = a->n;
	b->n = a->m;
	b->t = a->t;
	if (b->t) {
		q = 0;
		for (col = 0; col <= a->n; ++col) //按a的列序转置
			for (p = 0; p < a->t; ++p) //扫描整个三元组表
				if (a->data[p].j == col) {
					b->data[q].i = a->data[p].j;
					b->data[q].j = a->data[p].i;
					b->data[q].v = a->data[p].v;
					++q;
				}
	}
}
int main() {
	SPMatrix a, b;
	printf("\n 结束请输入(-1 -1 -1)\n");
	InitSPNode(&a);
	printf(" 输入矩阵为：\n");
	showMatrix(&a);//转置前
	TransposeSMatrix(&a, &b);
	printf(" 输出矩阵为: \n");
	showMatrix(&b);//转置后
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
后序遍历二叉树非递归方法
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>

typedef char EType;

struct BinaryTreeNode
{
	EType data;
	struct BinaryTreeNode* LChild;
	struct BinaryTreeNode* RChild;
};
typedef BinaryTreeNode BinaryTree;

typedef struct SType
{
	BinaryTreeNode* ptr;
	bool status;//进栈标志
}SType;

typedef struct Stack
{
	SType* element;
	int top;
	int MaxSize;
}Stack;

void CreatStack(Stack& S, int MaxStackSize);
bool IsEmpty(Stack& S);
bool IsFull(Stack& S);
bool GetTop(Stack& S, SType& result);
bool Pop(Stack& S, SType& result);
bool Push(Stack& S, SType& x);
void CreatBiTree(BinaryTreeNode** BT);
void PostOrderNoRecursive(BinaryTreeNode* BT);

int main()
{
	BinaryTreeNode* BT = NULL;
	CreatBiTree(&BT);
	printf("后序遍历二叉树非递归算法输出为：");
	PostOrderNoRecursive(BT);
	printf("\n");
	return 0;
}

void CreatStack(Stack& S, int MaxStackSize)
{
	S.MaxSize = MaxStackSize;
	S.element = new SType[S.MaxSize];
	S.top = -1;
}

bool IsEmpty(Stack& S)
{
	if (S.top == -1)
		return true;
	return false;
}

bool IsFull(Stack& S)
{
	if (S.top >= S.MaxSize - 1)
		return true;
	return false;
}

bool GetTop(Stack& S, SType& result)
{
	if (IsEmpty(S))
		return false;
	result = S.element[S.top];
	return true;
}

bool Pop(Stack& S, SType& result)
{
	if (IsEmpty(S))
		return false;
	result = S.element[S.top];
	S.top--;
	return true;
}

bool Push(Stack& S, SType& x)
{
	if (IsFull(S))
		return false;
	S.top++;
	S.element[S.top] = x;
	return true;
}

void CreatBiTree(BinaryTreeNode** BT)
{
	EType tem;

	scanf("%c", &tem);
	if (' ' == tem)
	{
		*BT = NULL;
	}
	else
	{
		*BT = new BinaryTreeNode;
		(*BT)->data = tem;
		CreatBiTree(&(*BT)->LChild);
		CreatBiTree(&(*BT)->RChild);
	}
}

void PostOrderNoRecursive(BinaryTreeNode* BT)
{
	Stack S;
	SType temp;
	BinaryTreeNode* p = BT;
	int MaxStackSize = 50;
	CreatStack(S, MaxStackSize);

	while (p || !IsEmpty(S))
	{
		if (p)//找最左子树
		{
			temp.status = false;//设置该节点是第一次进栈
			temp.ptr = p;
			Push(S, temp);
			p = p->LChild;
		}
		else
		{
			if (!IsEmpty(S))
			{
				Pop(S, temp);
				p = temp.ptr;
				if (temp.status)//若该节点是第二次退栈，就访问，并设置p=0继续退栈
				{
					printf("%c\t", p->data);
					p = NULL;
				}
				else
				{
					temp.status = true;//设置该节点是第二次进栈
					Push(S, temp);
					p = p->RChild;//遍历该节点的右子树
				}
			}
		}
	}
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
第七次实验
#include<stdio.h>
#include<malloc.h>
#define INF 32767
#define MAXV 100
#define MaxSize 100
int visited[MAXV] = { 0 };
typedef char InfoType;
typedef struct ANode
{
	int adjvex;
	struct ANode* nextarc;
	int weight;
}ArcNode;
typedef struct Vnode
{
	InfoType info;
	int count;
	ArcNode* firstarc;
}VNode;
typedef struct
{
	VNode adjlist[MAXV];
	int n, e;
}AdjGraph;
void CreatAdj(AdjGraph*& G, int A[MAXV][MAXV], int n, int e)
{
	int i, j;
	ArcNode* p;
	G = (AdjGraph*)malloc(sizeof(AdjGraph));
	for (i = 0; i < n; i++)
		G->adjlist[i].firstarc = NULL;
	for (i = 0; i < n; i++)
		for (j = n - 1; j >= 0; j--)
			if (A[i][j] != 0 && A[i][j] != INF)
			{
				p = (ArcNode*)malloc(sizeof(ArcNode));
				p->adjvex = j;
				p->weight = A[i][j];
				p->nextarc = G->adjlist[i].firstarc;
				G->adjlist[i].firstarc = p;
			}
	G->n = n; G->e = n;
}
void DispAdj(AdjGraph* G)
{
	ArcNode* p;
	for (int i = 0; i < G->n; i++)
	{
		p = G->adjlist[i].firstarc;
		printf("%3d:", i);
		while (p != NULL)
		{
			printf("%3d[%d]→", p->adjvex, p->weight);
			p = p->nextarc;
		}
		printf("^\n");
	}
}
void DestroyAdj(AdjGraph*& G)
{
	ArcNode* pre, * p;
	for (int i = 0; i < G->n; i++)
	{
		pre = G->adjlist[i].firstarc;
		if (pre != NULL)
		{
			p = pre->nextarc;
			while (p != NULL)
			{
				free(pre);
				pre = p; p = p->nextarc;
			}
			free(pre);
		}
	}
	free(G);
}
void DFSTree(AdjGraph* G, int v)
{
	ArcNode* p;
	visited[v] = 1;
	p = G->adjlist[v].firstarc;
	while (p != NULL)
	{
		if (visited[p->adjvex] == 0)
		{
			printf("(%d,%d)", v, p->adjvex);
			DFSTree(G, p->adjvex);
		}
		p = p->nextarc;
	}
}
void BFSTree(AdjGraph* G, int v)
{
	int w, i;
	int qu[MAXV];
	int front = 0, rear = 0;
	ArcNode* p;
	int visited[MAXV];
	for (i = 0; i < G->n; i++)
		visited[i] = 0;
	visited[v] = 1;
	rear++;
	qu[rear] = v;
	while (front != rear)
	{
		front = (front + 1) % MAXV;
		w = qu[front];
		p = G->adjlist[w].firstarc;
		while (p != NULL)
		{
			if (visited[p->adjvex] == 0)
			{
				printf("(%d,%d)", w, p->adjvex);
				visited[p->adjvex] = 1;
				rear = (rear + 1) % MAXV;
				qu[rear] = p->adjvex;
			}
			p = p->nextarc;
		}
	}
	printf("\n");
}
int main()
{
	AdjGraph* G;
	int A[MAXV][MAXV];
	int n = 11, e = 13;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			A[i][j] = 0;
	A[0][1] = 1; A[0][2] = 1; A[0][3] = 1;
	A[1][0] = 1; A[1][4] = 1; A[1][5] = 1;
	A[2][0] = 1; A[2][3] = 1; A[2][5] = 1; A[2][6] = 1;
	A[3][0] = 1; A[3][2] = 1; A[3][7] = 1;
	A[4][1] = 1; A[5][1] = 1; A[5][2] = 1;
	A[6][2] = 1; A[6][7] = 1; A[6][8] = 1; A[6][9] = 1;
	A[7][3] = 1; A[7][6] = 1; A[7][10] = 1;
	A[8][6] = 1; A[9][6] = 1; A[10][7] = 1;
	CreatAdj(G, A, n, e);
	printf("图G的邻接表:\n");
	DispAdj(G);
	int v = 3;
	printf("深度优先生成树:\n"); DFSTree(G, v); printf("\n");
	printf("广度优先生成树:\n"); BFSTree(G, v);
	DestroyAdj(G);
	return 1;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
第八次实验
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#define MAXV 10                    // 最大顶点个数 
typedef struct {
	int edges[MAXV][MAXV];         // 邻接矩阵的边数组  
	int n;                         // 顶点数 
}MGraph;  typedef struct ANode {
	int adjvex;                    // 该弧的终点位置 
	struct ANode* nextarc;        // 指向下一条弧的指针 
}ArcNode;  typedef struct {
	int no;                        // 顶点信息 
	int count;                     // 顶点入度 
	ArcNode* firstarc;            // 指向第一条弧
}VNode, AdjList[MAXV];

typedef struct {
	AdjList adjlist;               // 邻接表  
	int n;                         // 图的顶点数
}ALGraph;  void MatTolist(MGraph g, ALGraph*& G)
{
	int i, j, n = g.n;  ArcNode* p;
	G = (ALGraph*)malloc(sizeof(ALGraph));
	for (i = 0; i < n; i++)   G->adjlist[i].firstarc = NULL;
	for (i = 0; i < n; i++)   for (j = n - 1; j >= 0; j--)
		if (g.edges[i][j] != 0) {
			p = (ArcNode*)malloc(sizeof(ArcNode));
			p->adjvex = j;
			p->nextarc = G->adjlist[i].firstarc;
			G->adjlist[i].firstarc = p;
		}
	G->n = n;
}
void TopSort(ALGraph* G) {
	int i, j, flag = 0, a[MAXV];
	int St[MAXV], top = -1;        // 栈St的指针为
	top; ArcNode* p;
	for (i = 0; i < G->n; i++)         // 入度置初值为0  
		G->adjlist[i].count = 0;
	for (i = 0; i < G->n; i++)         // 求所有顶点的入度 
	{
		p = G->adjlist[i].firstarc;
		while (p != NULL)
		{
			G->adjlist[p->adjvex].count++;    p = p->nextarc;
		}
	}
	for (i = 0; i < G->n; i++)   if (G->adjlist[i].count == 0)      // 入度为0的顶点进栈 
	{
		top++;  St[top] = i;


	}  while (top > -1)                 // 栈不为空时循环  
	{
		i = St[top]; top--;        // 出栈  
		a[flag++] = i;               // 输出顶点 
		p = G->adjlist[i].firstarc;  // 找第一个相邻顶点   
		while (p != NULL)
		{
			j = p->adjvex;
			G->adjlist[j].count--;
			if (G->adjlist[j].count == 0)
			{
				top++;  St[top] = j;   // 入度为0的相邻顶点进栈 
			}    p = p->nextarc;        // 找下一个相邻顶点  
		}
	}
	if (flag < G->n)   printf("该图存在回路，不存在拓扑序列!\n");
	else
	{
		printf("该图的一个拓扑序列为:");
		for (i = 0; i < flag; i++)
			printf("%d", a[i]);
		printf("\n");
	}
}
void main()
{
	int i, j;  MGraph g;
	ALGraph* G;
	G = (ALGraph*)malloc(sizeof(ALGraph));
	printf("请输入图的顶点数:");
	scanf("%d", &g.n);
	printf("请输入图的邻接矩阵:\n");
	for (i = 0; i < g.n; i++)
		for (j = 0; j < g.n; j++)
			scanf("%d", &g.edges[i][j]);
	MatTolist(g, G);
	TopSort(G);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
第十次
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#define MAXL 100
typedef int KeyType;
typedef char InfoType;
typedef struct
{
	KeyType key;
	InfoType data;
}RecType;
void swap(RecType& x, RecType& y)
{
	RecType tmp = x;
	x = y;
	y = tmp;
}
void CreateList(RecType R[], KeyType keys[], int n)
{
	for (int i = 0; i < n; i++)
	{
		R[i].key = keys[i];
	}
}
void DispList(RecType R[], int n)
{
	for (int i = 0; i < n; i++)
		printf("%d ", R[i].key);
	printf("\n");
}
void CreateList1(RecType R[], KeyType keys[], int n)
{
	for (int i = 1; i <= n; i++)
	{
		R[i].key = keys[i - 1];
	}
}
void DispList1(RecType R[], int n)
{
	for (int i = 1; i <= n; i++)
		printf("%d ", R[i].key);
	printf("\n");
}
void disppart(RecType R[], int s, int t)
{
	static int i = 1;
	int j;
	printf("第%d次划分：", i);
	for (j = 0; j < s; j++)
		printf(" ");
	for (j = s; j <= t; j++)
		printf("%3d", R[j].key);
	printf("\n");
	i++;
}
int partition(RecType R[], int s, int t)
{
	int i = s, j = t;
	RecType tmp = R[i];
	while (i < j)
	{
		while (j > i && R[j].key >= tmp.key)
			j--;
		if (j > i)
		{
			R[i] = R[j];
			i++;
		}
		while (i < j && R[i].key <= tmp.key)
			i++;
		if (i < j)
		{
			R[j] = R[i];
			j--;
		}
	}
	R[i] = tmp;
	disppart(R, s, t);
	return i;
}
void QuickSort(RecType R[], int s, int t)
{
	int i;
	if (s < t)
	{
		i = partition(R, s, t);
		QuickSort(R, s, i - 1);
		QuickSort(R, i + 1, t);
	}
}
int count = 1;
void DispHeap(RecType R[], int i, int n)
{
	if (i <= n)
		printf("%d", R[i].key);
	if (2 * i <= n || 2 * i + 1 < n)
	{
		printf("(");
		if (2 * i <= n)
			DispHeap(R, 2 * i, n);
		printf(",");
		if (2 * i + 1 <= n)
			DispHeap(R, 2 * i + 1, n);
		printf(")");
	}
}
void Sift(RecType R[], int low, int high)
{
	int i = low, j = 2 * i;
	RecType temp = R[i];
	while (j <= high)
	{
		if (j < high && R[j].key < R[j + 1].key)
			j++;
		if (temp.key < R[j].key)
		{
			R[i] = R[j];
			i = j;
			j = 2 * i;
		}
		else break;
	}
	R[i] = temp;
}
void HeapSort(RecType R[], int n)
{
	int i, j;
	for (i = n / 2; i >= 1; i--)
		Sift(R, i, n);
	printf("初始堆：");
	DispHeap(R, 1, n);
	printf("\n");
	for (i = n; i >= 2; i--)
	{
		printf("第%d趟排序：", count++);
		printf("交换%d与%d,输出%d", R[i].key, R[1].key, R[1].key);
		swap(R[1], R[i]);
		printf("排序结果：");
		for (j = 1; j <= n; j++)
			printf("%2d ", R[j].key);
		printf("\n");
		Sift(R, 1, i - 1);
		printf("筛选调整得到堆：");
		DispHeap(R, 1, i - 1);
		printf("\n");
	}
}
int main()
{
	int n = 10;
	RecType R[MAXL];
	KeyType a[] = { 6,8,7,9,0,1,3,2,4,5 };
	int b;
	printf("请选择快速排序（1）或者堆排序（2）：");
	scanf("%d", &b);
	if (b == 1)
	{
		CreateList(R, a, n);
		printf("排序前:");
		DispList(R, n);
		QuickSort(R, 0, n - 1);
		printf("排序后:");
		DispList(R, n);
	}
	else
	{
		CreateList1(R, a, n);
		printf("排序前:");
		DispList1(R, n);
		HeapSort(R, n);
		printf("排序后:");
		DispList1(R, n);
	}
	return 1;
}
