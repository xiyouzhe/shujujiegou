///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
从字符串S中删除所有和字符串t相同的字串
#include<iostream>
#include<string>
using namespace std;

void move(string *s, int index)
{
	int len = s->length();
	for (int i = index; i < len; i++)
	{
		(*s)[i] = (*s)[i + 1];
	}
}
void change(string *s, string t)
{
	int len1 = s->length();
	int len2 = t.length();
	int s_index = 0;//记录长串下标
	while (s_index <= len1)
	{
		if ((*s)[s_index] == t[0]) 
		{
			int index_s1 = s_index;
			bool flag=true;
			for (int i = 1; i < len2; i++)
			{
				//char a1 = (*s)[s_index];
				index_s1 = index_s1 + 1;
				//char a2 = (*s)[index_s1];
				if ((*s)[index_s1] != t[i])
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				int index = s_index;
				for (int n = 0; n < len2; n++)
				{
					move(s, index);
				}
				s_index--;
			}
		}
		s_index++;
	}

}
int main()
{
	string s = "abcdefgyzhabc";
	cout << s << endl;
	string t = "yzh";
	cout << t << endl;
	change(&s,t);
	cout << s<<endl;
	system("pause");
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
第八次
（1）
#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<stack>
#include<set>
#include<map>
using namespace std;

typedef struct LNode
{
	int data;
	struct LNode* prior, * next;
}*linklist, LNode;
void Init(linklist& l)
{
	l = new LNode;
	l->next = NULL;
	l->prior = NULL;
}
void Insert(linklist& l, int n)
{
	int x;
	linklist p = l;
	for (int i = 0; i < n; i++)
	{
		cin >> x;
		linklist temp = new LNode;
		temp->data = x;
		temp->next = l->next;
		l->next = temp;
		temp->prior = l;
		l = temp;
	}
	l = p;
}
void Sort(linklist& l)
{
	linklist p = l->next, f;
	while (p->next)
		p = p->next;
	linklist r = p;
	f = l->next;
	while (1)
	{
		if (f != r)
		{
			for (p = f; p != r; p = p->next)
			{
				if (p->data > p->next->data)
				{
					int t = p->data;
					p->data = p->next->data;
					p->next->data = t;
				}
			}
			r = r->prior;
		}
		else break;
	}
}
void Print(linklist l)
{
	linklist p = l->next;
	while (p->next)
	{
		cout << p->data << ' ';
		p = p->next;
	}
	cout << p->data << endl;
}
int main()
{
	int n;
	while (cin >> n && n != 0)
	{
		linklist l;
		Init(l);
		Insert(l, n);
		Sort(l);
		Print(l);
	}
	return 0;
}
