///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
从字符串S中删除所有和字符串t相同的字串
#include<iostream>
#include<string>
using namespace std;

void move(string *s, int index)
{
	int len = s->length();
	for (int i = index; i < len; i++)
	{
		(*s)[i] = (*s)[i + 1];
	}
}
void change(string *s, string t)
{
	int len1 = s->length();
	int len2 = t.length();
	int s_index = 0;//记录长串下标
	while (s_index <= len1)
	{
		if ((*s)[s_index] == t[0]) 
		{
			int index_s1 = s_index;
			bool flag=true;
			for (int i = 1; i < len2; i++)
			{
				//char a1 = (*s)[s_index];
				index_s1 = index_s1 + 1;
				//char a2 = (*s)[index_s1];
				if ((*s)[index_s1] != t[i])
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				int index = s_index;
				for (int n = 0; n < len2; n++)
				{
					move(s, index);
				}
				s_index--;
			}
		}
		s_index++;
	}

}
int main()
{
	string s = "abcdefgyzhabc";
	cout << s << endl;
	string t = "yzh";
	cout << t << endl;
	change(&s,t);
	cout << s<<endl;
	system("pause");
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
第八次
（1）
#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<stack>
#include<set>
#include<map>
using namespace std;

typedef struct LNode
{
	int data;
	struct LNode* prior, * next;
}*linklist, LNode;
void Init(linklist& l)
{
	l = new LNode;
	l->next = NULL;
	l->prior = NULL;
}
void Insert(linklist& l, int n)
{
	int x;
	linklist p = l;
	for (int i = 0; i < n; i++)
	{
		cin >> x;
		linklist temp = new LNode;
		temp->data = x;
		temp->next = l->next;
		l->next = temp;
		temp->prior = l;
		l = temp;
	}
	l = p;
}
void Sort(linklist& l)
{
	linklist p = l->next, f;
	while (p->next)
		p = p->next;
	linklist r = p;
	f = l->next;
	while (1)
	{
		if (f != r)
		{
			for (p = f; p != r; p = p->next)
			{
				if (p->data > p->next->data)
				{
					int t = p->data;
					p->data = p->next->data;
					p->next->data = t;
				}
			}
			r = r->prior;
		}
		else break;
	}
}
void Print(linklist l)
{
	linklist p = l->next;
	while (p->next)
	{
		cout << p->data << ' ';
		p = p->next;
	}
	cout << p->data << endl;
}
int main()
{
	int n;
	while (cin >> n && n != 0)
	{
		linklist l;
		Init(l);
		Insert(l, n);
		Sort(l);
		Print(l);
	}
	return 0;
}


(2)
#include <stdio.h>
#include <stdlib.h>

void Print(int* arr, int length)
{
	for (int i = 1; i <= length; i++)
		printf("%d ", arr[i]);
}

void QuickSort(int* arr, int low, int high)
{
	int i = 1, j = 1, k = high, temp;
	while (k != j)
	{
		while (arr[k] == 3) k--;    //k指的是蓝色，故直接后移
		if (arr[k] == 1)        //k指的是红色
			if (i >= j)     //i左侧全部是红色，直接将k所指红色与i交换即可
			{
				temp = arr[k];
				arr[k] = arr[i];
				arr[i] = temp;
				i++;
			}
			else            //i<j时表示i所指为白色，此时应当将未处理的j所指与i交换，再将k所指红色与未处理交换
			{
				temp = arr[j];
				arr[j] = arr[i];
				arr[i] = temp;
				j++;
				temp = arr[k];
				arr[k] = arr[i];
				arr[i] = temp;
				i++;
			}
		if (arr[k] == 2)     //k指的是白色
			if (i <= j)   //j左侧为白色，直接将k所指交换即可
			{
				temp = arr[k];
				arr[k] = arr[j];
				arr[j] = temp;
				j++;
			}
			else         //j指的是红色，i的左侧是红色，故应当将k与i交换
			{
				temp = arr[k];
				arr[k] = arr[i];
				arr[i] = temp;
				j = i + 1;
			}
	}
	if (arr[k] == 2) j++; //此时k=j且j所指为白色
	else if (arr[k] == 1)  //j=k且j所指为红色，故应当和j所指调换位置
	{
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
		i++;
		j++;
	}
}

void main()
{
	int* arr;
	int  length;
	printf("请输入n的值");
	scanf_s("%d", &length);
	arr = (int*)malloc(sizeof(int) * (length + 1));
	printf("请依次输入石头颜色类型（1表示红色，2表示白色，3表示蓝色）");
	for (int i = 1; i <= length; i++)
		scanf_s("%d", &arr[i]);
	QuickSort(arr, 1, length);
	Print(arr, length);
}
